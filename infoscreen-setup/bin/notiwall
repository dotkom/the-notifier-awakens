#!/bin/bash

# This is the Notiwall CLI
VERSION="v1.1.1"
ARGS=( )
INSTALL_DIR=/usr/local/bin
CONFIG_DIR=~/.config/notiwall
TEMP_DIR=/tmp
ENV_FILE=$CONFIG_DIR/.env.local
INFOSCREEN_NAME="$2"
INFOSCREEN_TOKEN="$3"
DEFAULT_STATUS_SERVER="https://notiwall.online.ntnu.no/api/v1"
IS_INFOSCREEN=0
INSTALL_COMMAND="bash <(curl -Ls http://gg.gg/notiwall-cli)"

# TODO:
# * Remote mouse and rotate
# * Make rotation general (xrandr not working on PI)
# * Auto update through cron

function help() {
  echo "Usage: notiwall [options]"
  echo "       notiwall [command]"
  echo
  echo "Options:"
  echo "  -h, --help                 this help page"
  echo "  -v, --version              print Notiwall CLI version ($VERSION)"
  echo
  echo "Commands for infoscreens:"
  echo "  configure                  configure Notiwall settings"
  echo "  cron [-l|--list]           configure crontab jobs like regular screenshots"
  echo "  env [-l|--list]            configure environment variables"
  echo "  open [-d|--detached] [<affiliation>]"
  echo "                             open browser with https://notiwall.online.ntnu.no(/<affiliation>)"
  echo "                             in kiosk mode"
  echo "  install [<name>] [<token>]"
  echo "                             install Notiwall CLI $VERSION"
  echo "  mouse move <x> <y>         move mouse"
  echo "  mouse click                do a mouse click"
  echo "  rotate [0-3]               configure screen rotation. 0 is normal, rest goes counter-clockwise"
  echo "  reinstall                  resintall Notiwall CLI, meaning uninstall then install"
  echo "  send ip|screenshot         send screenshot or ip to notiwall server"
  echo "  send sensor <name> <type> <value>"
  echo "                             send sensor value to notiwall server"
  echo "  uninstall                  uninstall Notiwall CLI and purge files from system"
  echo "  upgrade                    upgrade Notiwall CLI if possible"
  echo
  echo "Remote commands (to control infoscreens):"
  echo "  screenshot <user>@<ip>                get screenshot of infoscreen"
  #echo "  remote mouse move <user>@<ip> <x> <y> move mouse"
  #echo "  remote mouse click <user>@<ip>        do a mouse click"
  #echo "  remote rotate <user>@<ip> [0-3]       configure screen rotation. 0 is normal, rest goes counter-clockwise"
  echo
  echo "Find more details at: https://github.com/dotkom/the-notifier-awakens/infoscreen-setup"
  echo
}

function open() {
  # Kiosk mode is not preferred here as it is almost impossible to close
  local CHROME_OPTIONS="--disable-notifications --disable-translate --disable-plugins --disable-extensions --incognito --start-fullscreen --fullscreen"
  local DEFAULT_URL="https://notiwall.online.ntnu.no"
  local AFFILIATION="$1"
  if [ ! -z $1 ]; then
    AFFILIATION="/$AFFILIATION"
  fi
  local URL="${2:-$DEFAULT_URL}$AFFILIATION"

  # Preferring Chromium as it has kiosk mode still available
  if command -v chromium-browser > /dev/null 2>&1; then
    echo "Found Chromium. Opening browser..."
    chromium-browser $CHROME_OPTIONS $URL > /dev/null 2>&1
    echo "Browser closed."
  elif command -v google-chrome > /dev/null 2>&1; then
    echo "Found Google Chrome. Opening browser..."
    google-chrome $CHROME_OPTIONS $URL > /dev/null 2>&1
    if command -v xdotool > /dev/null 2>&1; then
      xdotool key F11
    fi
    echo "Browser closed."
  else
    echo "Could not find Google Chrome or Chromium. Please download from https://chrome.google.com"
  fi
}

function configureEnv() {
  local DEFAULT_INFOSCREEN_NAME="infoscreen-"$(( RANDOM % 1000 ))
  local DEFAULT_INFOSCREEN_TOKEN=$(( RANDOM % 10000 ))

  # Ask for values
  if [[ "$1" == "server" ]]; then
    if [ -z $STATUS_SERVER ]; then
      echo -n "External server to send IP to (defaults to $DEFAULT_STATUS_SERVER): "
    else
      echo -n "External server to send IP to (defaults to $STATUS_SERVER): "
      DEFAULT_STATUS_SERVER=
    fi
    read STATUS_SERVER_INPUT
    STATUS_SERVER_INPUT=${STATUS_SERVER_INPUT:-$DEFAULT_STATUS_SERVER}
  fi

  if [ -z $INFOSCREEN_NAME ]; then
    echo -n "Unique infoscreen name (defaults to $DEFAULT_INFOSCREEN_NAME): "
  else
    echo -n "Unique infoscreen name (defaults to $INFOSCREEN_NAME): "
    DEFAULT_INFOSCREEN_NAME=$INFOSCREEN_NAME
  fi
  read INFOSCREEN_NAME_INPUT
  INFOSCREEN_NAME_INPUT=${INFOSCREEN_NAME_INPUT:-$DEFAULT_INFOSCREEN_NAME}

  if [ -z $INFOSCREEN_TOKEN ]; then
    echo -n "Secret token (defaults to a random token): "
  else
    echo -n "Secret token (defaults to previous token): "
    DEFAULT_INFOSCREEN_TOKEN=$INFOSCREEN_TOKEN
  fi
  read -s INFOSCREEN_TOKEN_INPUT
  INFOSCREEN_TOKEN_INPUT=${INFOSCREEN_TOKEN_INPUT:-$DEFAULT_INFOSCREEN_TOKEN}

  echo

  # Apply changes to env file
  if [[ "$1" == "server" ]]; then
    if [[ $STATUS_SERVER_INPUT != "" ]]; then
      if cat $ENV_FILE | grep -Eq "^STATUS_SERVER="; then
        sed -i "s,STATUS_SERVER=.*,STATUS_SERVER=$STATUS_SERVER_INPUT," $ENV_FILE
      else
        echo "STATUS_SERVER=$STATUS_SERVER_INPUT" >> $ENV_FILE
      fi
    fi
  fi
  if [[ $INFOSCREEN_NAME_INPUT != "" ]]; then
      if cat $ENV_FILE | grep -Eq "^INFOSCREEN_NAME="; then
    sed -i "s,INFOSCREEN_NAME=.*,INFOSCREEN_NAME=$INFOSCREEN_NAME_INPUT," $ENV_FILE
    else
      echo "INFOSCREEN_NAME=$INFOSCREEN_NAME_INPUT" >> $ENV_FILE
    fi
  fi
  if [[ $INFOSCREEN_TOKEN_INPUT != "" ]]; then
    if cat $ENV_FILE | grep -Eq "^INFOSCREEN_TOKEN="; then
      sed -i "s,INFOSCREEN_TOKEN=.*,INFOSCREEN_TOKEN=$INFOSCREEN_TOKEN_INPUT," $ENV_FILE
    else
      echo "INFOSCREEN_TOKEN=$INFOSCREEN_TOKEN_INPUT" >> $ENV_FILE
    fi
  fi
}

function manage_env() {
  mkdir -p $CONFIG_DIR
  if [ ! -f "$ENV_FILE" ]; then
    echo "File, $ENV_FILE, does not exist. Asking how to set environment variables:"
    echo -n > $ENV_FILE
    configureEnv "$1"
  else
    if cat $ENV_FILE | grep -Eq "^STATUS_SERVER=|^INFOSCREEN_NAME=|^INFOSCREEN_TOKEN="; then
      read -p "Environment variables are already set. Reconfigure? [y/N] " -n 1 -r
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo
        source $ENV_FILE
        configureEnv "$1"
      fi
    else
      echo "Environment variables are not set. Asking how to set them:"
      configureEnv "$1"
    fi
  fi
}

function command_crontab() {
  local COMMAND="$1"
  if [ ! -z "$COMMAND" ]; then
    if [[ "$2" == "clean" ]]; then
      if crontab -l | grep "$COMMAND" > /dev/null 2>&1; then
        echo "Removing lines containing command: $COMMAND"
        (crontab -l | grep -v "$COMMAND") | crontab -
      fi
    else
      DEFAULT_INTERVAL="*/10 * * * *"
      INTERVAL="${2:-$DEFAULT_INTERVAL}"
      CRONTAB_LINE="$INTERVAL $COMMAND"
      if crontab -l | grep -Fxq "$CRONTAB_LINE"; then
        echo "Line already exists in crontab:"
        echo "$CRONTAB_LINE"
        echo "Skipping step."
      elif crontab -l | grep -Fq "$COMMAND"; then
        echo "Schedule was changed. Applying change..."
        PREV_LINE=$(crontab -l | grep "$COMMAND")
        PREV=${PREV_LINE%\**}"*"
        (crontab -l | grep -v "$COMMAND"; echo "$CRONTAB_LINE") | crontab -
        NEXT_LINE=$(crontab -l | grep "$COMMAND")
        NEXT=${NEXT_LINE%\**}"*"
        echo "Changed schedule from $PREV to $NEXT."
      else
        echo "Adding $CRONTAB_LINE to crontab..."
        (crontab -l; echo "$CRONTAB_LINE") | crontab -
      fi
    fi
  fi
}

# Send a POST request with current IP to STATUS_SERVER
function push_ip() {
  if [ -f $ENV_FILE ]; then
    source $ENV_FILE
  fi
  IP=$(hostname -I)
  TOKEN=$(echo -n $INFOSCREEN_NAME:$INFOSCREEN_TOKEN | base64)
  curl -X POST "${STATUS_SERVER:-$DEFAULT_STATUS_SERVER}/ip/$TOKEN" -d "$IP"
}

function push_sensor() {
  if [ -f $ENV_FILE ]; then
    source $ENV_FILE
  fi
  TOKEN=$(echo -n $INFOSCREEN_NAME:$INFOSCREEN_TOKEN | base64)
  curl -X POST "${STATUS_SERVER:-$DEFAULT_STATUS_SERVER}/sensors/$TOKEN" -d "
  {
    \"name\": \"$1\",
    \"type\": \"$2\",
    \"value\": \"$3\"
  }"
}

function screenshot() {
  if [ -f $ENV_FILE ]; then
    source $ENV_FILE
  fi
  FILE_NAME=screenshot.png
  STATUS="NOT DONE"
  if command -v scrot > /dev/null 2>&1; then
    DISPLAY=${DISPLAY:-\:0.0} scrot $TEMP_DIR/$FILE_NAME
    STATUS="DONE"
  elif command -v import > /dev/null 2>&1; then
    DISPLAY=${DISPLAY:-\:0.0} import -window root -resize 800 $TEMP_DIR/$FILE_NAME
    STATUS="DONE"
  fi
  if [[ "$STATUS" == "NOT DONE" ]]; then
    sudo apt update
    sudo apt install scrot -y
    DISPLAY=${DISPLAY:-\:0.0} scrot $TEMP_DIR/$FILE_NAME
    STATUS="DONE"
  fi
}

# Send a POST request with current screenshot to STATUS_SERVER
function push_screenshot() {
  screenshot
  if [[ "$STATUS" == "DONE" ]]; then
    TOKEN=$(echo -n $INFOSCREEN_NAME:$INFOSCREEN_TOKEN | base64)
    curl "${STATUS_SERVER:-$DEFAULT_STATUS_SERVER}/screenshot/$TOKEN" -F "image=@$TEMP_DIR/$FILE_NAME"
  fi
}

function remote_get_ip() {
  echo "NOT IMPLEMENTED"
}

function remote_screenshot() {
  IMG_NAME=screenshot
  EXT=png
  REMOTE="$1"
  echo "Taking screenshot on $REMOTE..."
  ssh $REMOTE "$INSTALL_COMMAND screenshot"
  echo "Fetching screenshot from $REMOTE..."
  scp $REMOTE:$TEMP_DIR/$IMG_NAME.$EXT $TEMP_DIR/$IMG_NAME.$EXT
  echo "Displaying screenshot at $TEMP_DIR/$IMG_NAME.$EXT"
  eog $TEMP_DIR/$IMG_NAME.$EXT
}

function manage_crontab() {
  if [[ "$1" == "stop" ]]; then
    REPLY=N
  elif [[ "$1" == "start" ]]; then
    REPLY=Y
  else
    read -p "Want to continously send screenshots and ip to external server (health check)? [Y/n] " -n 1 -r
    echo
  fi
  local COMMAND=$INSTALL_COMMAND
  if command -v notiwall > /dev/null 2>&1; then
    COMMAND="$INSTALL_DIR/notiwall"
    command_crontab "/bin/bash $INSTALL_COMMAND send ip" "clean"
    command_crontab "/bin/bash $INSTALL_COMMAND send screenshot" "clean"
  fi
  if [[ ! $REPLY =~ ^[Nn]$ ]]; then
    if [[ $2 =~ ^[1-9][0-9]*$ ]]; then
      NUMBER=$2
    else
      echo -n "How often (in minutes) do you want to send? (default is 10) "
      read REPLY
      NUMBER=${REPLY:-10}
      echo
    fi
    if [[ $NUMBER =~ ^[1-9][0-9]*$ ]]; then
      NUMBER="*/$NUMBER * * * *"
    fi
    command_crontab "/bin/bash $COMMAND send ip" "$NUMBER"
    command_crontab "/bin/bash $COMMAND send screenshot" "$NUMBER"
  else
    command_crontab "/bin/bash $COMMAND send ip" "clean"
    command_crontab "/bin/bash $COMMAND send screenshot" "clean"
  fi
}

function manage_rotation() {
  if [[ "$1" =~ ^[0-3]$ ]]; then
    xrandr -o $1
  else
    read -p "Is the screen rotation correct? [Y/n] " -n 1 -r
    if [[ $REPLY =~ ^[Nn]$ ]]; then
      echo
      while [[ $REPLY =~ ^[Nn]$ ]]
      do
        echo
        echo "Normalizing screen rotation..."
        xrandr -o 0
        echo "Now the screen is in normal position. Follow the instructions:"
        echo
        echo "  [1]:^     [2]:<-       [3]:v       [4]:->"
        echo
        echo "  ██╗                   ██████╗               "
        echo " ███║     ████╗  ██╗   ██╔════╝      ███████╗ "
        echo " ╚██║    ██╔═██╗ ██║   ╚█████╗       ██╔════╝ "
        echo "  ██║    ██║ ██║ ██║   ██╔═══╝       ██║      "
        echo "  ██║    ██║ ╚█████║   ╚██████╗  ███████████╗ "
        echo "  ╚═╝    ╚═╝  ╚════╝    ╚═════╝  ╚══════════╝ "
        echo
        read -p "Which of these numbers has the correct rotation? [1-4] " -n 1 -r
        echo
        if [[ $REPLY =~ ^[1-4]$ ]]; then
          xrandr -o $(( $REPLY - 1 ))
          read -p "Is the screen rotation correct now? [Y/n] " -n 1 -r
          echo
        elif [[ $REPLY =~ ^[Nn]$ ]]; then
          echo "Skipping screen rotation setup."
        else
          echo "You need to input either 1, 2, 3 or 4. Trying again."
          REPLY=N
        fi
      done
    fi
  fi
}

function click_mouse() {
  if command -v xdotool > /dev/null 2>&1; then
    DISPLAY=:0 xdotool click 1
  else
    echo "xdotool is missing. Install using `apt install xdotool`"
  fi
}

function move_mouse() {
  if command -v xdotool > /dev/null 2>&1; then
    DISPLAY=:0 xdotool mousemove $1 $2
  else
    echo "xdotool is missing. Install using `apt install xdotool`"
  fi
}

function notiwall_install() {
  if [[ ! -f $ENV_FILE ]]; then
    if [[ ! -z $1 ]]; then
      mkdir -p $CONFIG_DIR
      echo "INFOSCREEN_NAME=$1" > $ENV_FILE
    fi
    if [[ ! -z $2 ]]; then
      echo "INFOSCREEN_TOKEN=$2" >> $ENV_FILE
    fi
    if [[ ! -z $3 ]]; then
      echo "STATUS_SERVER=$3" >> $ENV_FILE
      STATUS_SERVER="$3"
    else
      STATUS_SERVER=$DEFAULT_STATUS_SERVER
    fi
  else
    if [[ ! -z $1 ]]; then
      grep -Ev "^INFOSCREEN_NAME=" $ENV_FILE > $TEMP_DIR/envfile
      cat $TEMP_DIR/envfile > $ENV_FILE
      echo "INFOSCREEN_NAME=$1" >> $ENV_FILE
    fi
    if [[ ! -z $2 ]]; then
      grep -Ev "^INFOSCREEN_TOKEN=" $ENV_FILE > $TEMP_DIR/envfile
      cat $TEMP_DIR/envfile > $ENV_FILE
      echo "INFOSCREEN_TOKEN=$2" >> $ENV_FILE
    fi
    if [[ ! -z $3 ]]; then
      grep -Ev "^STATUS_SERVER=" $ENV_FILE > $TEMP_DIR/envfile
      cat $TEMP_DIR/envfile > $ENV_FILE
      echo "STATUS_SERVER=$3" >> $ENV_FILE
      STATUS_SERVER="$3"
    else
      source $ENV_FILE
      STATUS_SERVER="${STATUS_SERVER:-$DEFAULT_STATUS_SERVER}"
    fi
  fi
  curl -s $STATUS_SERVER/notiwall.sh -o $TEMP_DIR/notiwall
  if bash $TEMP_DIR/notiwall > /dev/null 2>&1; then
    sudo cp $TEMP_DIR/notiwall $INSTALL_DIR
    sudo chmod +x $INSTALL_DIR/notiwall
    VERSION_NAME=$($INSTALL_DIR/notiwall --version)
    echo "Done! You are now using $VERSION_NAME"
  else
    echo "Installation failed... Contact the creators of notiwall on GitHub about this."
    echo "Alternative solution is to add content of this file $STATUS_SERVER/notiwall.sh to $INSTALL_DIR/notiwall."
    exit 1
  fi
  if [ -f $TEMP_DIR/notiwall ]; then
    rm $TEMP_DIR/notiwall
  fi
}

function check_install() {
  if command -v notiwall > /dev/null 2>&1; then
    if [[ $(notiwall -v | awk '{print $3}') != "$VERSION" ]] ; then
      echo "New Notiwall CLI version detected: $VERSION. Upgrading..."
      echo
      notiwall_install "$1" "$2" "$3"
      echo "Notiwall CLI $VERSION is now installed."
    else
      echo "Notiwall CLI $VERSION is already installed."
      echo
      help
    fi
  else
    echo "Installing notiwall..."
    read -p "Is this an infoscreen? [Y/n] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Nn]$ ]]; then
      IS_INFOSCREEN=0
    else
      IS_INFOSCREEN=1
    fi
    notiwall_install "$1" "$2" "$3"
    echo "Run \`notiwall\` to check if it worked."
  fi
}

function uninstall() {
  if command -v notiwall > /dev/null 2>&1; then
    echo "Uninstalling notiwall..."
    if [ -f $TEMP_DIR/notiwall ]; then
      rm $TEMP_DIR/notiwall
    fi
    sudo rm $INSTALL_DIR/notiwall
    echo "Done!"
  else
    echo "Notiwall is already uninstalled"
  fi
}

function default_cases() {
  if [[ $1 =~ ^[0-9]+$ ]]; then
    if [[ "$PREV" == "configure-crontab-start" ]]; then ARGS+=( $1 )
    elif [[ "$PREV" == "configure-crontab" ]]; then ARGS+=( $1 )
    elif [[ "$PREV" == "configure-rotation" ]]; then ARGS+=( $1 )
    elif [[ "$PREV" == "mouse-move" ]]; then ARGS+=( $1 )
    elif [[ "$PREV" == "install" ]]; then ARGS+=( $1 )
    elif [[ "$PREV" == "upgrade" ]]; then ARGS+=( $1 )
    elif [[ "$PREV" == "reinstall" ]]; then ARGS+=( $1 )
    elif [[ "$PREV" =~ ^open ]]; then ARGS+=( $1 )
    fi
  elif [[ "$PREV" == "screenshot" ]]; then ARGS+=( $1 )
  elif [[ "$PREV" == "send-sensor" ]]; then ARGS+=( $1 )
  elif [[ "$PREV" == "install" ]]; then ARGS+=( $1 )
  elif [[ "$PREV" == "upgrade" ]]; then ARGS+=( $1 )
  elif [[ "$PREV" == "reinstall" ]]; then ARGS+=( $1 )
  elif [[ "$PREV" =~ ^open ]]; then ARGS+=( $1 )
  else NEXT_COMMAND="help"
  fi
}

NEXT_COMMAND=""
PREV=""
for arg in "$@"; do
  PREV="$NEXT_COMMAND"
  key="$arg"
  case $key in
    configure)     [[ "$PREV" == "" ]] && NEXT_COMMAND="configure" || default_cases $key;;
    send)          [[ "$PREV" == "" ]] && NEXT_COMMAND="send" || default_cases $key;;
    ip)            [[ "$PREV" == "send" ]] && NEXT_COMMAND="send-ip" || default_cases $key;;
    sensor)        [[ "$PREV" == "send" ]] && NEXT_COMMAND="send-sensor" || default_cases $key;;
    screenshot)    if [[ "$PREV" == "send" ]]; then NEXT_COMMAND="send-screenshot"
                   elif [[ "$PREV" == "" ]]; then NEXT_COMMAND="screenshot"
                   else default_cases $key
                   fi;;
    mouse)         [[ "$PREV" == "" ]] && NEXT_COMMAND="mouse" || default_cases $key;;
    move)          [[ "$PREV" == "mouse" ]] && NEXT_COMMAND="mouse-move" || default_cases $key;;
    click)         [[ "$PREV" == "mouse" ]] && NEXT_COMMAND="mouse-click" || default_cases $key;;
    open)          [[ "$PREV" == "" ]] && NEXT_COMMAND="open" || default_cases $key;;
    -d|--detached) [[ "$PREV" == "open" ]] && NEXT_COMMAND="open-detached" || default_cases $key;;
    upgrade)       [[ "$PREV" == "" ]] && NEXT_COMMAND="upgrade" || default_cases $key;;
    install)       [[ "$PREV" == "" ]] && NEXT_COMMAND="install" || default_cases $key;;
    reinstall)     [[ "$PREV" == "" ]] && NEXT_COMMAND="reinstall" || default_cases $key;;
    uninstall)     [[ "$PREV" == "" ]] && NEXT_COMMAND="uninstall" || default_cases $key;;
    env)           [[ "$PREV" =~ ^$|^configure$ ]] && NEXT_COMMAND="configure-env" || default_cases $key;;
    cron)          [[ "$PREV" =~ ^$|^configure$ ]] && NEXT_COMMAND="configure-crontab" || default_cases $key;;
    -l|--list)     if [[ "$PREV" == "configure-env" ]]; then NEXT_COMMAND="list-env"
                   elif [[ "$PREV" == "configure-crontab" ]]; then NEXT_COMMAND="list-crontab"
                   else default_cases $key
                   fi;;
    rotate)        [[ "$PREV" =~ ^$|^configure$ ]] && NEXT_COMMAND="configure-rotation" || default_cases $key;;
    start)         [[ "$PREV" == "configure-crontab" ]] && NEXT_COMMAND="configure-crontab-start" || default_cases $key;;
    stop)          [[ "$PREV" == "configure-crontab" ]] && NEXT_COMMAND="configure-crontab-stop" || default_cases $key;;
    -v|--version)  [[ "$PREV" == "" ]] && NEXT_COMMAND="version" || default_cases $key;;
    -h|--help)     [[ "$PREV" == "" ]] && NEXT_COMMAND="help" || default_cases $key;;
    *) default_cases $key;;
  esac
done

case $NEXT_COMMAND in
  configure)
    manage_rotation
    manage_env
    manage_crontab
    ;;
  configure-env)
    manage_env "server"
    ;;
  list-env)
    cat $ENV_FILE
    ;;
  configure-crontab)
    if [[ "${ARGS[0]}" =~ ^[1-9][0-9]*$ ]]; then
      manage_crontab "start" "${ARGS[0]}"
    else
      manage_crontab
    fi
    ;;
  configure-crontab-start)
    manage_crontab "start" "${ARGS[0]}"
    ;;
  configure-crontab-stop)
    manage_crontab "stop"
    ;;
  list-crontab)
    if crontab -l | grep -v "#"; then
      echo -n
    else
      echo "No crontab is configured."
    fi
    ;;
  configure-rotation)
    manage_rotation "${ARGS[0]}"
    ;;
  send)
    echo "Specify either ip or screenshot, example:"
    echo "$ notiwall send ip"
    ;;
  send-ip)
    push_ip
    ;;
  send-sensor)
    push_sensor "${ARGS[0]}" "${ARGS[1]}" "${ARGS[2]}"
    ;;
  send-screenshot)
    push_screenshot
    ;;
  screenshot)
    if [[ -z ${ARGS[0]} ]]; then
      screenshot
    else
      remote_screenshot "${ARGS[0]}"
    fi
    ;;
  mouse-move)
    if [[ -z ${ARGS[0]} ]] && [[ -z ${ARGS[1]} ]]; then
      echo "Missing both x and y position as arguments"
    elif [[ -z ${ARGS[1]} ]]; then
      echo "Missing y position (second argument)"
    else
      echo "Moving mouse to: (${ARGS[0]}, ${ARGS[1]})"
      move_mouse ${ARGS[0]} ${ARGS[1]}
    fi
    ;;
  mouse-click)
    echo "Clicking left mouse"
    click_mouse
    ;;
  open)
    open "${ARGS[0]}"
    ;;
  open-detached)
    open "${ARGS[0]}" &
    ;;
  upgrade)
    echo "Upgrading Notiwall CLI..."
    notiwall_install "${ARGS[0]}" "${ARGS[1]}" "${ARGS[2]}"
    ;;
  install)
    check_install "${ARGS[0]}" "${ARGS[1]}" "${ARGS[2]}"
    if [[ $IS_INFOSCREEN == 1 ]]; then
      manage_rotation
      if [[ -z ${ARGS[0]} ]] && [[ -z ${ARGS[1]} ]]; then
        manage_env
      fi
      manage_crontab
    fi
    ;;
  reinstall)
    uninstall
    check_install "${ARGS[0]}" "${ARGS[1]}" "${ARGS[2]}"
    ;;
  uninstall)
    uninstall
    ;;
  version)
    echo "Notiwall CLI $VERSION"
    ;;
  help)
    help
    ;;
  *)
    help
    ;;
esac
